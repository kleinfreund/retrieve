var u=class extends Error{name="ResponseError";response;constructor(t,r,a){super(r||`${t.status} ${t.statusText}`.trim(),a),this.response=t}toJSON(){return{name:this.name,message:this.message}}};var p="content-type",E="multipart/form-data",R="application/json",h="application/problem+json",c="application/octet-stream",m="plain/text",T={arrayBuffer:c,blob:c,formData:E,json:R,text:m};async function v(e){let t=H(e),r=P(e),a=[t,r];for(let n of e.beforeRequestHandlers??[])a=await n(...a);let s;try{s=await fetch(...a)}catch(n){let i=q(n,e.requestErrorMessage);for(let y of e.requestErrorHandlers??[]){let d=await y(i,...a);if(d.status==="corrected"){s=d.value;break}else i=d.value}if(s===void 0)throw i}let o=await f(s);for(let n of e.responseSuccessHandlers??[])return o.response.ok&&(o=await n(o)),o;let l=new u(s,e.responseErrorMessage);for(let n of e.responseErrorHandlers??[]){let i=await n(l,o,...a);i.status==="corrected"?o=await f(i.value):l=i.value}if(o.response.ok)return o;throw l}function H(e){let t=new URL(e.url,e.baseUrl??window.location.origin);if(e.params){let r=e.params instanceof URLSearchParams?e.params:new URLSearchParams(e.params);for(let[a,s]of r)t.searchParams.set(a,s)}return t}function P(e){let t=e.init??{},r={};r.method=(t.method??"GET").toUpperCase();let a=t.headers instanceof Headers?t.headers:new Headers(t.headers);a.set("x-requested-with","XMLHttpRequest");let s;if("data"in e){let o=a.get(p);e.data instanceof ArrayBuffer?s="arrayBuffer":e.data instanceof Blob?s="blob":e.data instanceof FormData?s="formData":o?.startsWith(R)||o===null&&!["GET","HEAD"].includes(r.method)?s="json":typeof e.data=="string"&&(s="text")}return s!==void 0&&(s==="formData"?a.delete(p):a.has(p)||a.set(p,T[s])),r.headers=a,"data"in e?r.body=s==="json"?JSON.stringify(e.data):e.data:"body"in t&&(r.body=t.body),e.timeout!==void 0&&e.timeout>0&&!("signal"in r)&&(r.signal=AbortSignal.timeout(e.timeout)),r}function q(e,t){let r=e instanceof Error?e:new Error;return r.message!==""&&(r.cause=r.message),t?r.message=t:typeof e=="string"&&e.length>0?r.message=e:r.message===""&&(r.message="Unknown request error"),r}async function f(e){let t=e.headers.get(p)??"",r;t.startsWith(R)||t.startsWith(h)?r="json":t.startsWith(E)?r="formData":t.startsWith(m)&&(r="text");try{let a=r!==void 0?await e[r]():null;return{response:e,data:a}}catch(a){let s=a,o={};throw"cause"in s&&(o.cause=s.cause),new u(e,s.message,o)}}export{u as ResponseError,v as retrieve};
