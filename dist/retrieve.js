var p=class extends Error{response;constructor(a,r,t){super(r||"Unknown response error",t),this.name="ResponseError",this.response=a}toJSON(){return{name:this.name,message:this.message}}};var u="content-type",E="multipart/form-data",R="application/json",y="application/problem+json",c="application/octet-stream",m="plain/text",T={arrayBuffer:c,blob:c,formData:E,json:R,text:m};async function v(e){let a=H(e),r=P(e),t=[a,r];for(let n of e.beforeRequestHandlers??[])t=await n(...t);let s;try{s=await fetch(...t)}catch(n){let i=q(n,e.requestErrorMessage);for(let h of e.requestErrorHandlers??[]){let d=await h(i,...t);if(d.status==="corrected"){s=d.value;break}else i=d.value}if(s===void 0)throw i}let o=await f(s);for(let n of e.responseSuccessHandlers??[])return o.response.ok&&(o=await n(o)),o;let l=new p(s,e.responseErrorMessage);for(let n of e.responseErrorHandlers??[]){let i=await n(l,o,...t);i.status==="corrected"?o=await f(i.value):l=i.value}if(o.response.ok)return o;throw l}function H(e){let a=new URL(e.url,e.baseUrl??window.location.origin);if(e.params){let r=e.params instanceof URLSearchParams?e.params:new URLSearchParams(e.params);for(let[t,s]of r)a.searchParams.set(t,s)}return a}function P(e){let a=e.init??{},r={};r.method=(a.method??"GET").toUpperCase();let t=a.headers instanceof Headers?a.headers:new Headers(a.headers);t.set("x-requested-with","XMLHttpRequest");let s;if("data"in e){let o=t.get(u);o?.startsWith(R)||o===null&&!["GET","HEAD"].includes(r.method)?s="json":typeof e.data=="string"?s="text":e.data instanceof ArrayBuffer?s="arrayBuffer":e.data instanceof Blob?s="blob":e.data instanceof FormData&&(s="formData")}return s!==void 0&&(s==="formData"?t.delete(u):t.has(u)||t.set(u,T[s])),r.headers=t,"data"in e&&(r.body=s==="json"?JSON.stringify(e.data):e.data),e.timeout!==void 0&&e.timeout>0&&!("signal"in r)&&(r.signal=AbortSignal.timeout(e.timeout)),r}function q(e,a){let r=e instanceof Error?e:new Error;return r.message!==""&&(r.cause=r.message),a?r.message=a:typeof e=="string"&&e.length>0?r.message=e:r.message===""&&(r.message="Unknown request error"),r}async function f(e){let a=e.headers.get(u)??"",r;a.startsWith(R)||a.startsWith(y)?r="json":a.startsWith(E)?r="formData":a.startsWith(m)&&(r="text"),e.json;try{let t=r!==void 0?await e[r]():null;return{response:e,data:t}}catch(t){let s=t,o={};throw"cause"in s&&(o.cause=s.cause),new p(e,s.message,o)}}export{p as ResponseError,v as retrieve};
